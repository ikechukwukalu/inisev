
name: PUSH Staging Workflow

on:
  push:
    branches:
      - staging

jobs:
  app-tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      mysql:
        image: mariadb:10.4.27
        env:
          MARIADB_ROOT_PASSWORD: ${{ secrets.DB_DEV_PASSWORD }}
          MARIADB_DATABASE: ${{ secrets.DB_DEV_NAME }}
        ports:
          - 3307:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2
      - name: Create or copy .env
        env:
            DOT_ENV: ${{ secrets.DOT_ENV_DEV }}
        run: |
          touch .env
          echo "$DOT_ENV" | tee .env
          php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install NPM Dependencies
        run: |
          npm install
          npm run build
      - name: Install Composer Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist  --ignore-platform-reqs
      - name: Generate key
        run: php artisan key:generate
      - name: Execute tests (Unit and Feature tests) using PHPUnit
        env:
          DB_CONNECTION: mysql
          DB_PORT: 3307
          DB_USER: root
          DB_PASSWORD: ${{ secrets.DB_DEV_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DEV_NAME }}
          REDIS_HOST: localhost
          REDIS_PASSWORD: null
          REDIS_PORT: 6379
          REDIS_CLIENT: predis
        run: |
          php artisan migrate --seed
          php artisan test --parallel --recreate-databases
      # - name: Run Snyk to check for vulnerabilities
      #   uses: snyk/actions/php@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: --all-projects
      #     command: test
  deploy-staging:
    name: Deploy Project to STAGING Server
    runs-on: ubuntu-latest
    needs: [app-tests]
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@master
        env:
            DOT_ENV: ${{ secrets.DOT_ENV_STAGING }}
            PAT: ${{ secrets.PAT }}
            DEPLOY_PATH_STAGING: ${{ secrets.DEPLOY_PATH_STAGING }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOT_ENV, PAT, DEPLOY_PATH_STAGING
          script: |
            mkdir -p /tmp/staging/export-backend
            sudo chmod -R 777 /tmp/staging/export-backend
            cd /tmp/staging && git clone https://$PAT@github.com/africanies/export-backend.git
            cd /tmp/staging/export-backend
            sudo git checkout staging
            sudo touch .env
            echo "$DOT_ENV" | sudo tee /tmp/staging/export-backend/.env
            composer install
            sudo npm install && npm run build
            sudo php artisan migrate --seed --force
            sudo php artisan optimize:clear
            sudo php artisan scout:sync-index-settings
            sudo php artisan scout:import 'App\Models\Product'
            sudo php artisan scout:import 'App\Models\UserAddress'
            sudo php artisan scout:import 'App\Models\UserExport'
            sudo php artisan scout:import 'App\Models\User'
            sudo rm -r $DEPLOY_PATH_STAGING/export-backend-old
            sudo mv $DEPLOY_PATH_STAGING/export-backend $DEPLOY_PATH_STAGING/export-backend-old
            sudo mkdir -p $DEPLOY_PATH_STAGING/export-backend
            sudo cp -r /tmp/staging/export-backend/* $DEPLOY_PATH_STAGING/export-backend
            sudo rm -r /tmp/staging/export-backend
            echo "$DOT_ENV" | sudo tee $DEPLOY_PATH_STAGING/export-backend/.env
            sudo chmod -R 0755 $DEPLOY_PATH_STAGING/export-backend
            sudo chown -R $USER:www-data $DEPLOY_PATH_STAGING/export-backend/storage
            sudo chmod -R 775 $DEPLOY_PATH_STAGING/export-backend/storage
            cd $DEPLOY_PATH_STAGING/export-backend/storage/logs/
            sudo touch laravel.log
            sudo chmod -R 775 $DEPLOY_PATH_STAGING/export-backend/storage/logs/laravel.log
            sudo supervisorctl restart staging-export-api:*
            sudo supervisorctl reread && sudo supervisorctl update


